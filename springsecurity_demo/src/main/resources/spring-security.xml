<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">


    <!--拦截规则配置-->
    <!--auto-config:自动配置，自动生成login页面，登录处理，退出处理
        use-expressions：是否使用spring el表达式
                         true：access值 hasRole hasAuthority hasAny...
                         false：access值只能是以ROLE_打头或那3个常量，否则启动报错
    -->
    <security:http auto-config="true" use-expressions="false">
        <!--intercept-url：拦截url，标定访问的权限
            pattern：url匹配的规则，/**拦截所有
            access：需要什么权限才可以访问
             登陆者必须拥有access中的权限(即可以是角色也可以是权限)才可以访问pattern的路径
        -->
    <security:intercept-url pattern="/**" access="ROLE_ADMIN"/>
    </security:http>

    <!--认证管理器-->
    <security:authentication-manager>
        <!--认证信息（登录用户信息）的提供者-->
        <security:authentication-provider>
            <!--用户信息服务-->
            <security:user-service>
                <!--security:user 在内存中写死一个用户信息
                    用户名，密码（数据库），权限集合
                    authorities：权限集合
                    {noop}：no operation 加密的方式，明文
                -->
                <security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>
</beans>